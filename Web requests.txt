Hypertext Transfer Protocol (HTTP)
	http://admin:password@inlanefreight.com:80/dashboard.php?login=true#status
	
	Component		Example				Description
	Scheme			http:// https://	This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (://)
	User Info		admin:password@		This is an optional component that contains the credentials (separated by a colon :) used to authenticate to the host, and is separated from the host with an at sign (@)
	Host			inlanefreight.com	The host signifies the resource location. This can be a hostname or an IP address
	Port			:80					The Port is separated from the Host by a colon (:). If no port is specified, http schemes default to port 80 and https default to port 443
	Path			/dashboard.php		This points to the resource being accessed, which can be a file or a folder. If there is no path specified, the server returns the default index (e.g. index.html).
	Query String	?login=true			The query string starts with a question mark (?), and consists of a parameter (e.g. login) and a value (e.g. true). Multiple parameters can be separated by an ampersand (&).
	Fragments		#status				Fragments are processed by the browsers on the client-side to locate sections within the primary resource (e.g. a header or section on the page).

Curl
	- Downloads index.html
		$ curl -s -O inlanefreight.com/index.html
		-s: Silent mode
		-O: Output index.html to a file
	- See the version of HTTP Apache server:
		$curl -v 206.189.125.243:30332	
	- Include response headers with content:
		$ curl -i 206.189.117.48:31345
	- View response headers only
		$ curl -I 206.189.117.48:31345
	- Add basic authentication: (username:admin, password: admin)
		$ curl -v -I -u admin:admin 206.189.117.48:31345
		$ curl -v -I http://admin:admin@206.189.117.48:31345
			- The request for this includes a Authorization header which we can use to access the page without credentials
	- Hack basic authentication using hashed uname:password from Authorization request header:
		$ curl -v -H "Authorization: Basic YWRtaW46YWRtaW4=" http://206.189.117.48:31345
		$ curl -v -H "Authorization: Basic YWRtaW46YWRtaW4=" http://206.189.117.48:31345/search.php?search=flag
		
Browser DevTools:
	Edge: F12 -> Network tab
		- Each item in the name column is a HTTP request/response and can be opened by double click.
	Edge: F12 -> Network console
		- Send HTTP requests
		
HTTP Request:
	GET /users/login.html HTTP/1.1
	HOST: inlanefreight.com
	User-Agent: ...
	...
	
	Field	Example				Description
	Method	GET					The HTTP method or verb, which specifies the type of action to perform.
	Path	/users/login.html	The path to the resource being accessed. This field can also be suffixed with a query string (e.g. ?username=user).
	Version	HTTP/1.1			The third and final field is used to denote the HTTP version.


HTTP Response:
	HTTP/1.1 200 OK


HTTP Headers:
	- General headers
		- Describes the message rather than its contents
		Header		Example									Description
		Date		Date: Wed, 16 Feb 2022 10:38:44 GMT		Holds the date and time at which the message 
															originated. It's preferred to convert the time to 
															the standard UTC time zone.
		Connection	Connection: close						Dictates if the current network connection should 
															stay alive after the request finishes. Two commonly 
															used values for this header are close and keep-alive. 
															The close value from either the client or server means 
															that they would like to terminate the connection, while 
															the keep-alive header indicates that the connection 
															should remain open to receive more data and input.

	- Entity headers:
		- Describes the content
		Header				Example							Description
		Content-Type		Content-Type: text/html			Used to describe the type of resource being transferred. The value is automatically added by the browsers on the client-side and returned in the server response. The charset field denotes the encoding standard, such as UTF-8.
		Media-Type			Media-Type: application/pdf		The media-type is similar to Content-Type, and describes the data being transferred. This header can play a crucial role in making the server interpret our input. The charset field may also be used with this header.
		Boundary			boundary="b4e4fbd93540"			Acts as a maker to separate content when there is more than one in the same message. For example, within a form data, this boundary gets used as --b4e4fbd93540 to separate different parts of the form.
		Content-Length		Content-Length: 385				Holds the size of the entity being passed. This header is necessary as the server uses it to read data from the message body, and is automatically generated by the browser and tools like cURL.
		Content-Encoding	Content-Encoding: gzip			Data can undergo multiple transformations before being passed. For example, large amounts of data can be compressed to reduce the message size. The type of encoding being used should be specified using the Content-Encoding header.	
	
	- Request headers
		- Used in HTTP request, not about content
		Header			Example									Description
		Host			Host: www.inlanefreight.com				Used to specify the host being queried for the resource. This can be a domain name or an IP address. HTTP servers can be configured to host different websites, which are revealed based on the hostname. This makes the host header an important enumeration target, as it can indicate the existence of other hosts on the target server.
		User-Agent		User-Agent: curl/7.77.0					The User-Agent header is used to describe the client requesting resources. This header can reveal a lot about the client, such as the browser, its version, and the operating system.
		Referer			Referer: http://www.inlanefreight.com/	Denotes where the current request is coming from. For example, clicking a link from Google search results would make https://google.com the referer. Trusting this header can be dangerous as it can be easily manipulated, leading to unintended consequences.
		Accept			Accept: */*								The Accept header describes which media types the client can understand. It can contains multiple media types separated by commas. The */* value signifies that all media types are accepted.
		Cookie			Cookie: PHPSESSID=b4e4fbd93540			Contains cookie-value pairs in the format name=value. A cookie is a piece of data stored on the client-side and on the server, which acts as an identifier. These are passed to the server per request, thus maintaining the client's access. Cookies can also serve other purposes, such as saving user preferences or session tracking. There can be multiple cookies in a single header separated by a semi-colon.
		Authorization	Authorization: BASIC cGFzc3dvcmQK		Another method for the server to identify clients. After successful authentication, the server returns a token unique to the client. Unlike cookies, tokens are stored only on the client-side and retrieved by the server per request. There are multiple types of authentication types based on the webserver and application type used.

	- Response headers
		- Used in HTTP response, not about content
		Header				Example										Description
		Server				Server: Apache/2.2.14 (Win32)				Contains information about the HTTP server, which processed the request. It can be used to gain information about the server, such as its version, and enumerate it further.
		Set-Cookie			Set-Cookie: PHPSESSID=b4e4fbd93540			Contains the cookies needed for client identification. Browsers parse the cookies and store them for future requests. This header follows the same format as the Cookie request header.
		WWW-Authenticate	WWW-Authenticate: BASIC realm="localhost"	Notifies the client about the type of authentication required to access the requested resource.

	- Security headers
		- Specify rules and policies to be followed by the browser
		Header								Example											Description
		Content-Security-Policy				Content-Security-Policy: script-src 'self'		Dictates the website's policy towards externally injected resources. This could be JavaScript code as well as script resources. This header instructs the browser to accept resources only from certain trusted domains, hence preventing attacks such as Cross-site scripting (XSS).
		Strict-Transport-Security			Strict-Transport-Security: max-age=31536000		Prevents the browser from accessing the website over the plaintext HTTP protocol, and forces all communication to be carried over the secure HTTPS protocol. This prevents attackers from sniffing web traffic and accessing protected information such as passwords or other sensitive data.
		Referrer-Policy						Referrer-Policy: origin							Dictates whether the browser should include the value specified via the Referer header or not. It can help in avoiding disclosing sensitive URLs and information while browsing the website.
		
		
Request Methods
	Method	Description
	GET		Requests a specific resource. Additional data can be passed to the server via query strings in the URL (e.g. ?param=value).
	POST	Sends data to the server. It can handle multiple types of input, such as text, PDFs, and other forms of binary data. This data is appended in the request body present after the headers. The POST method is commonly used when sending information (e.g. forms/logins) or uploading data to a website, such as images or documents.
	HEAD	Requests the headers that would be returned if a GET request was made to the server. It doesn't return the request body and is usually made to check the response length before downloading resources.
	PUT		Creates new resources on the server. Allowing this method without proper controls can lead to uploading malicious resources.
	DELETE	Deletes an existing resource on the webserver. If not properly secured, can lead to Denial of Service (DoS) by deleting critical files on the web server.
	OPTIONS	Returns information about the server, such as the methods accepted by it.
	PATCH	Applies partial modifications to the resource at the specified location.

Response Codes
	Type	Description
	1xx		Provides information and does not affect the processing of the request.
	2xx		Returned when a request succeeds.
	3xx		Returned when the server redirects the client.
	4xx		Signifies improper requests from the client. For example, requesting a resource that doesn't exist or requesting a bad format.
	5xx		Returned when there is some problem with the HTTP server itself.

GET Request:
	- Places the user parameter within the URL
		$ curl -v -H "Authorization: Basic YWRtaW46YWRtaW4=" http://206.189.117.48:31345/search.php?search=flag
		
POST Request:
	- Places user parameter within HTTP request body
		$ curl -X POST -d "username=admin&password=admin" http://139.59.191.154:31734/
	- Retrieve cookie from response header:
		$ curl -X POST -d "username=admin&password=admin" http://139.59.191.154:31734/ -i
	- Use the cookie to interact without entering credentials:
		$ curl -b "PHPSESSID=1kqgpaffptb12bpivp7lnapqcd" http://139.59.191.154:31734/
		- Or Sepcified as a header:
			$ curl -H "Cookie:PHPSESSID=1kqgpaffptb12bpivp7lnapqcd" http://139.59.191.154:31734/
		- Using browser DevTools:
			Edge: Application -> Storage -> Cookies
			Firefox: Storage -> Cookies
			- Login with credentials, remove cookies, reload the page
			- Create a new cookie with the previous cookie
			- login
	- Query using active cookie
		$ curl -X POST -d "{\"search\":\"flag\"}" -b "PHPSESSID=et7ki6vhplofk6viveq83vh98q" -H "Content-Type: application/json" http://139.59.191.154:30109/search.php
			- Double quoted is escaped when inside json
		
APIs:
	- Query the database for london:
		$ curl -s http://206.189.117.48:31222/api.php/city/london | jq
	- Add row to the database using API:
		$ curl -X POST http://206.189.117.48:30347/api.php/city/ -d "{\"city_name\":\"HTB_City\", \"country_name\":\"HTB\"}" -H "Content-Type: application/json"
	- Update a row:
		$ curl -X PUT http://206.189.117.48:31222/api.php/city/london -d "{\"city_name\":\"New_HTB_City\", \"country_name\":\"HTB\"}" -H "Content-Type: application/json"
	- Delete a row:
		$ curl -X DELETE http://206.189.117.48:31222/api.php/city/New_HTB_City/
		
	
